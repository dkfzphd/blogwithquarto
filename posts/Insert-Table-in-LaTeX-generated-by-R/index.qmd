---
title: "'Insert' Table in LaTeX generated by R. Table (R code to LaTeX code)"
author: "Te"
date: "2022-11-26"
categories: [LaTeX,table, kableExtra]
---

![](kableplot.png){fig-align="center"}

## Table syntax in LaTeX is complicated

Inserting (Generating) Table in LaTeX causes physical and psychological pain (at least for me). That is due to the complex LaTeX Table syntax, for instance, the unlimited use of "&" as a maker for column alignment. It gets even worse for left/center/right alignment within the same column. What else if we want some extra color for labeling data magnitude?

![](https://media.giphy.com/media/qRY3cPYRkyQh2/giphy.gif){fig-align="center"}

## Solution 1

[Tables generator for LaTeX, html, markdown](https://www.tablesgenerator.com/#)

Basically the same way as with Excel and the code will automatically generated.

-   Pro

    1.  For small datasets,
    2.  The input and formatting are very straightforward and intuitive.

-   Cons

    1.  You cannot do any calculation beyond the text itself.
    2.  It is not capable of processing large datasets.
    3.  Risk of errors arising from typos.

## Solution 2

R is a language designed for statistics. And R has many great packages to make tables `gt, gtsummary, gtExtrakable, kableExtra` , etc.

The only thing you need to care about is the data manipulation itself, with a few lines of code the table is automatically generated and formatted based on your syntax.

**So, it would be great if one could adopt the table directly from R to LaTeX.**<br>

Here I introduce a method that was written in the kableExtra file called [Create Awesome LaTeX Table with knitr::kable and kableExtra](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf)

The solution is put "latex" in the R code, then the output will be converted into LaTeX code with the data inside and one can directly copy and paste into LaTeX IDE.

Example: `kbl(data,"latex",  booktabs = T)`

```{r message=FALSE,warning=FALSE}
require(kableExtra)
require(tidyverse)
# get partial data from mtcars for making a table
dt <- mtcars[1:5,1:6]
dt%>%
  kbl(caption = "Recreating booktabs style table") %>%
  kable_classic(full_width = F, html_font = "Cambria")
```

From R code to LaTeX code

``` r
dt%>%
  kbl("latex",caption = "Recreating booktabs style table") %>%
  kable_classic(full_width = F, html_font = "Cambria")
```

The LaTeX code is

``` tex
\begin{table}

\caption{Recreating booktabs style table}
\centering
\begin{tabular}[t]{l|r|r|r|r|r|r}
\hline
  & mpg & cyl & disp & hp & drat & wt\\
\hline
Mazda RX4 & 21.0 & 6 & 160 & 110 & 3.90 & 2.620\\
\hline
Mazda RX4 Wag & 21.0 & 6 & 160 & 110 & 3.90 & 2.875\\
\hline
Datsun 710 & 22.8 & 4 & 108 & 93 & 3.85 & 2.320\\
\hline
Hornet 4 Drive & 21.4 & 6 & 258 & 110 & 3.08 & 3.215\\
\hline
Hornet Sportabout & 18.7 & 8 & 360 & 175 & 3.15 & 3.440\\
\hline
\end{tabular}
\end{table}
```

More complex tables may use these packages in TeX system

    -  \usepackage{booktabs}
    -  \usepackage{longtable}
    -  \usepackage{array}
    -  \usepackage{multirow}
    -  \usepackage{wrapfig}
    -  \usepackage{float}
    -  \usepackage{colortbl}
    -  \usepackage{pdflscape}
    -  \usepackage{tabu}
    -  \usepackage{threeparttable}
    -  \usepackage{threeparttablex}
    -  \usepackage[normalem]{ulem}
    -  \usepackage{makecell}
    -  \usepackage{xcolor}

## Solution 3

**Why not use Rmarkdown/Quarto directly for an article or a Report** <br> It is pdf document friendly.<br> Easily deal with inline column plot, which is still very diffcult for TeX system.

```{r}
mpg_list <- split(mtcars$mpg, mtcars$cyl)
disp_list <- split(mtcars$disp, mtcars$cyl)
inline_plot <- data.frame(cyl = c(4, 6, 8), mpg_box = "", mpg_hist = "",
                          mpg_line1 = "", mpg_line2 = "",
                          mpg_points1 = "", mpg_points2 = "", mpg_poly = "")
inline_plot %>%
  kbl(booktabs = TRUE) %>%
  kable_paper(full_width = FALSE) %>%
  column_spec(2, image = spec_boxplot(mpg_list)) %>%
  column_spec(3, image = spec_hist(mpg_list)) %>%
  column_spec(4, image = spec_plot(mpg_list, same_lim = TRUE)) %>%
  column_spec(5, image = spec_plot(mpg_list, same_lim = FALSE)) %>%
  column_spec(6, image = spec_plot(mpg_list, type = "p")) %>%
  column_spec(7, image = spec_plot(mpg_list, disp_list, type = "p")) %>%
  column_spec(8, image = spec_plot(mpg_list, polymin = 5))
```
