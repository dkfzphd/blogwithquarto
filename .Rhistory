scale_x_continuous(expand = c(0, 0)) +
geom_bar_text(aes(label = value),
color = "blue",
vjust = 1,
size = 4 * ggplot2::.pt,
min.size = 4 * ggplot2::.pt,
padding.x = grid::unit(0, "pt"),
padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
# data from 王敏杰 老师
# his book https://bookdown.org/wangminjie/R4DS/author.html
d <- tibble::tribble(
~name, ~value,
"Alice",   2.12,
"Bob",  68.45,
"Carlie",  15.84,
"Dave",   7.38,
"Eve",   0.56
)
library(tidyverse)
library(ggfittext)
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "gray45") +
geom_text(aes(label = value, hjust = 1))  +
theme_classic() +
scale_x_continuous(expand = c(0, 0)) +
labs(x = NULL, y = NULL)
# ggfittext to adjust the text position
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "#99d594") +
scale_x_continuous(expand = c(0, 0)) +
geom_bar_text(aes(label = value),
color = "red",
vjust = 1,
size = 4 * ggplot2::.pt,
min.size = 4 * ggplot2::.pt,
padding.x = grid::unit(0, "pt"),
padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
# ggfittext to adjust the text position
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "#99d594") +
scale_x_continuous(expand = c(0, 0)) +
geom_bar_text(aes(label = value),
color = "blue",
vjust = 1,
size = 4 * ggplot2::.pt,
min.size = 4 * ggplot2::.pt,
padding.x = grid::unit(0, "pt"),
padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
# ggfittext to adjust the text position
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "#99d594") +
scale_x_continuous(expand = c(0, 0)) +
geom_bar_text(aes(label = value),
color = "blue",
vjust = 1,
size = 10 * ggplot2::.pt,
min.size = 4 * ggplot2::.pt,
padding.x = grid::unit(0, "pt"),
padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
# ggfittext to adjust the text position
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "#99d594") +
scale_x_continuous(expand = c(0, 0)) +
geom_text(aes(label = value),
color = "blue",
vjust = 1,
size = 4 * ggplot2::.pt,
min.size = 4 * ggplot2::.pt,
padding.x = grid::unit(0, "pt"),
padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
# ggfittext to adjust the text position
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "#99d594") +
scale_x_continuous(expand = c(0, 0)) +
geom_bar_text(aes(label = value),
color = "blue",
vjust = 1,
size = 4 * ggplot2::.pt,
min.size = 4 * ggplot2::.pt,
padding.x = grid::unit(0, "pt"),
padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
?geom_bar_text
# ggfittext to adjust the text position
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "#99d594") +
scale_x_continuous(expand = c(0, 0)) +
geom_bar_text(aes(label = value),
color = "blue",
vjust = 1,
# size = 4 * ggplot2::.pt,
# min.size = 4 * ggplot2::.pt,
# padding.x = grid::unit(0, "pt"),
# padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
# ggfittext to adjust the text position
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "#99d594") +
scale_x_continuous(expand = c(0, 0)) +
geom_bar_text(label = value,
color = "blue",
vjust = 1,
# size = 4 * ggplot2::.pt,
# min.size = 4 * ggplot2::.pt,
# padding.x = grid::unit(0, "pt"),
# padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
# ggfittext to adjust the text position
d %>%
ggplot(aes(x = value, y = fct_reorder(name, value)) ) +
geom_col(width = 0.6, fill = "#99d594") +
scale_x_continuous(expand = c(0, 0)) +
geom_bar_text(aes(label = d$value),
color = "blue",
vjust = 1,
# size = 4 * ggplot2::.pt,
# min.size = 4 * ggplot2::.pt,
# padding.x = grid::unit(0, "pt"),
# padding.y = grid::unit(0, "pt"),
outside = TRUE)+
labs(x = "",
y = "")+
theme_classic()
ggplot(data=hour,aes(hour_x, hour_y)) +
geom_point(data=df, aes(x, y),color="blue") +
geom_path(data=hour,aes(0.5*hour_x, 0.5*hour_y),color="blue") +
geom_point(data=hour,aes(0.5*hour_x, 0.5*hour_y),color="blue") +
geom_point(size=8,color="red") +
# geom_path() +
geom_text(data=hour,aes(label = c(12,1:11,""))) +
geom_point(data=center,aes(x,y),size=4, color="black")+
coord_fixed()
library(tidyverse)
library(ggrepel)
theme_set(theme_minimal())
#这里理解有点绕弯
# 1. 从pi/2作为起点是因为正常坐标系和对应的时钟0点位置不同，要旋转pi/2
# 2.从pi/2顺时针旋转一周应该是 -2 * pi，顺时针意味着负号
# 3. length.out = 61 这里 从0到60的点一共是
#    61个点，点与点之间有60个分化，我们计算的是点坐标，因此要获得这61一个点的坐标位置length.out = 61
# 4. 同理小时计算的是时间12个分化，计算13个点的坐标length.out = 13
theta <- seq(pi / 2, -2 * pi + pi / 2 , length.out = 61)
radius <- seq(10, 30, length.out = 60)
min_radius <- 30
hour_radius <- 30
x <- min_radius* cos(theta)
y <- min_radius * sin(theta)
hour_tick <- seq(pi / 2, -2 * pi + pi / 2, length.out = 13)
hour_x <- hour_radius * cos(hour_tick)
hour_y <- hour_radius * sin(hour_tick)
df <- tibble(x, y)
hour <- tibble(hour_x, hour_y)
center <- tibble(x=0,y=0)
::: {.column width="60%"}
::: {.column width="40%"}
require(kableExtra)
kbl(mtcars[1:5,1:6], booktabs = T)
require(kableExtra)
kbl(mtcars[1:5,1:6], booktabs = T,"html")
dt <- mtcars[1:5,1:6]
dt%>%
kbl("latex",,caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
require(kableExtra)
require(tidyverse)
dt <- mtcars[1:5,1:6]
dt%>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
dt <- mtcars[1:5,1:6]
dt%>%
kbl("latex",,caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
dt <- mtcars[1:5,1:6]
dt%>%
kbl("latex",caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
#|results='asis'
dt <- mtcars[1:5,1:6]
dt%>%
kbl("latex",caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
dt%>%
kbl("latex",caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
library(tidyverse)
theme_set(theme_bw())
#define range
p = seq(0, 1, by=0.001)
y <- dbeta(p, 2, 10)
#create plot of Beta distribution with shape parameters 2 and 10
plot(p, y, type='l', col=4)
areafunction <-  function(x) {
y <- dbeta(x, 2, 10)
y[x < 0.1  |  x > 0.45 ] <- NA
y[0.2< x & x < 0.3 ] <- NA
return(y)
}
betadf <- tibble(p,y)
ggplot(betadf,aes(p,y))+
geom_line()+
scale_x_continuous(breaks = c(0,1,.2,0.45,0.3,0.1))+
stat_function(fun = areafunction, geom = "area", fill="red", alpha=.3 )
library(tidyverse)
theme_set(theme_bw())
#define range
p = seq(0, 1, by=0.001)
y <- dbeta(p, 2, 10)
#create plot of Beta distribution with shape parameters 2 and 10
plot(p, y, type='l', col=4)
areafunction <-  function(x) {
y <- dbeta(x, 2, 10)
y[x < 0.1  |  x > 0.45 ] <- NA
y[0.2< x & x < 0.3 ] <- NA
return(y)
}
betadf <- tibble(p,y)
ggplot(betadf,aes(p,y))+
geom_line()+
scale_x_continuous(breaks = c(0,1,.2,0.45,0.3,0.1))+
stat_function(fun = areafunction, geom = "area", fill="blue", alpha=.3 )
sort(c(0,1,.2,0.45,0.3,0.1))
library(tidyverse)
theme_set(theme_bw())
#define range
p = seq(0, 1, by=0.001)
y <- dbeta(p, 2, 10)
#create plot of Beta distribution with shape parameters 2 and 10
plot(p, y, type='l', col=4)
areafunction <-  function(x) {
y <- dbeta(x, 2, 10)
y[x < 0.1  |  x > 0.45 ] <- NA
y[0.2< x & x < 0.3 ] <- NA
return(y)
}
betadf <- tibble(p,y)
ggplot(betadf,aes(p,y))+
geom_line()+
scale_x_continuous(breaks = c(0.00, 0.10, 0.20, 0.30, 0.45, 1.00))+
stat_function(fun = areafunction, geom = "area", fill="blue", alpha=.3 )
library(tidyverse)
theme_set(theme_bw())
#define range
p = seq(0, 1, by=0.001)
y <- dbeta(p, 2, 10)
#create plot of Beta distribution with shape parameters 2 and 10
plot(p, y, type='l', col=4)
areafunction <-  function(x) {
y <- dbeta(x, 2, 10)
y[x < 0.1  |  x > 0.45 ] <- NA
y[0.2< x & x < 0.3 ] <- NA
return(y)
}
betadf <- tibble(p,y)
ggplot(betadf,aes(p,y))+
geom_line()+
scale_x_continuous(breaks = c(0.00, 0.10, 0.20, 0.30, 0.45, 1.00))+
stat_function(fun = areafunction, geom = "area", fill="blue4", alpha=.3 )
library(tidyverse)
theme_set(theme_bw())
#define range
p = seq(0, 1, by=0.001)
y <- dbeta(p, 2, 10)
#create plot of Beta distribution with shape parameters 2 and 10
plot(p, y, type='l', col=4)
areafunction <-  function(x) {
y <- dbeta(x, 2, 10)
y[x < 0.1  |  x > 0.45 ] <- NA
y[0.2< x & x < 0.3 ] <- NA
return(y)
}
betadf <- tibble(p,y)
ggplot(betadf,aes(p,y))+
geom_line()+
scale_x_continuous(breaks = c(0.00, 0.10, 0.20, 0.30, 0.45, 1.00))+
stat_function(fun = areafunction, geom = "area", fill="red", alpha=.3 )
plot(trees)
#这里理解有点绕弯
# 1. 从pi/2作为起点是因为正常坐标系和对应的时钟0点位置不同，要旋转pi/2
# 2.从pi/2顺时针旋转一周应该是 -2 * pi，顺时针意味着负号
# 3. length.out = 61 这里 从0到60的点一共是
#    61个点，点与点之间有60个分化，我们计算的是点坐标，因此要获得这61一个点的坐标位置length.out = 61
# 4. 同理小时计算的是时间12个分化，计算13个点的坐标length.out = 13
theta <- seq(pi / 2, -2 * pi + pi / 2 , length.out = 61)
radius <- seq(10, 30, length.out = 60)
min_radius <- 30
hour_radius <- 30
x <- min_radius* cos(theta)
y <- min_radius * sin(theta)
hour_tick <- seq(pi / 2, -2 * pi + pi / 2, length.out = 13)
hour_x <- hour_radius * cos(hour_tick)
hour_y <- hour_radius * sin(hour_tick)
df <- tibble(x, y)
ggplot(data=hour,aes(hour_x, hour_y)) +
geom_point(data=df, aes(x, y),color="blue") +
geom_path(data=hour,aes(0.5*hour_x, 0.5*hour_y),color="blue") +
geom_point(data=hour,aes(0.5*hour_x, 0.5*hour_y),color="blue") +
geom_point(size=8,color="red") +
# geom_path() +
geom_text(data=hour,aes(label = c(12,1:11,""))) +
geom_point(data=center,aes(x,y),size=4, color="black")+
coord_fixed()
library(tidyverse)
library(ggrepel)
theme_set(theme_minimal())
#这里理解有点绕弯
# 1. 从pi/2作为起点是因为正常坐标系和对应的时钟0点位置不同，要旋转pi/2
# 2.从pi/2顺时针旋转一周应该是 -2 * pi，顺时针意味着负号
# 3. length.out = 61 这里 从0到60的点一共是
#    61个点，点与点之间有60个分化，我们计算的是点坐标，因此要获得这61一个点的坐标位置length.out = 61
# 4. 同理小时计算的是时间12个分化，计算13个点的坐标length.out = 13
theta <- seq(pi / 2, -2 * pi + pi / 2 , length.out = 61)
radius <- seq(10, 30, length.out = 60)
min_radius <- 30
hour_radius <- 30
x <- min_radius* cos(theta)
y <- min_radius * sin(theta)
hour_tick <- seq(pi / 2, -2 * pi + pi / 2, length.out = 13)
hour_x <- hour_radius * cos(hour_tick)
hour_y <- hour_radius * sin(hour_tick)
df <- tibble(x, y)
hour <- tibble(hour_x, hour_y)
center <- tibble(x=0,y=0)
ggplot(data=hour,aes(hour_x, hour_y)) +
geom_point(data=df, aes(x, y),color="blue") +
geom_path(data=hour,aes(0.5*hour_x, 0.5*hour_y),color="blue") +
geom_point(data=hour,aes(0.5*hour_x, 0.5*hour_y),color="blue") +
geom_point(size=8,color="red") +
# geom_path() +
geom_text(data=hour,aes(label = c(12,1:11,""))) +
geom_point(data=center,aes(x,y),size=4, color="black")+
coord_fixed()
#这里理解有点绕弯
# 1. 从pi/2作为起点是因为正常坐标系和对应的时钟0点位置不同，要旋转pi/2
# 2.从pi/2顺时针旋转一周应该是 -2 * pi，顺时针意味着负号
# 3. length.out = 61 这里 从0到60的点一共是
#    61个点，点与点之间有60个分化，我们计算的是点坐标，因此要获得这61一个点的坐标位置length.out = 61
# 4. 同理小时计算的是时间12个分化，计算13个点的坐标length.out = 13
theta <- seq(pi / 2, -2 * pi + pi / 2 , length.out = 61)
radius <- seq(10, 30, length.out = 61)
theta1 <- seq(pi / 2, -2 * pi + pi / 2 , length.out = 13)
radius1 <- seq(10, 30, length.out = 13)
omega <- seq(0, pi  , length.out = 31)
min_radius <- 31
hour_radius <- 31
x <- min_radius* cos(theta)
y <- min_radius * sin(theta)
hour_tick <- seq(pi / 2, -2 * pi + pi / 2, length.out = 13)
hour_x <- hour_radius * cos(hour_tick)
hour_y <- hour_radius * sin(hour_tick)
curl_df <- tibble(x=radius* cos(theta),
y=radius* sin(theta))
curl_point <- tibble(x=radius1* cos(theta1),
y=radius1* sin(theta1))
df <- tibble(x, y)
hour <- tibble(hour_x, hour_y)
center <- tibble(x=0,y=0)
ggplot(data = hour, aes(hour_x, hour_y, color = factor(hour_y))) +
geom_point(data = df, aes(x, y), color = "black") +
geom_point(size = 12) +
geom_text(data = hour, color = "black", aes(label = c("12", 1:11, ""))) +
geom_point(data = center, aes(x, y), size = 4, color = "black") +
geom_path(data = df, aes(1.07 * x, 1.07 * y), color = "black") +
geom_path(data = df, aes(0.93 * x, 0.93 * y), color = "black") +
labs(
y = NULL,
x = NULL,
) +
coord_fixed() +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.grid = element_blank())
library(DiagrammeR)
grViz("
digraph flowchat{
# several 'node' statements
node [shape = circle, fontname = Helvetica, fillcolor='#e9a3c9', color='#e9a3c9',style=filled]
Vector; Insert
# set other 'node's statements
node [shape = rect, fontname = Helvetica, color='#a1d76a', fillcolor='#a1d76a', style=filled]
# several 'edge' statements
edge[color='#0a9396',style=filled,arrowhead=vee]
Vector-> 'PCR or Synthesis'->Linearized
Linearized->Seamless_Cloning
Vector->'Non-linearized'->Digestion->Purification->Linearized->Ligation
Insert->Sticky_end->Ligation
Insert->Blunt_end -> Seamless_Cloning->New_Plasmid
Ligation->New_Plasmid
New_Plasmid[fillcolor='#ffcb77',style=filled,color='#ffcb77']
# must add style=filled otherwise does not work with fillcolor
subgraph {
rank = same; Vector; Insert; }
subgraph {
rank = same; Linearized; Blunt_end; Sticky_end; }
}",height = 600)
library(DiagrammeR)
grViz("
digraph flowchat{
# several 'node' statements
node [shape = circle, fontname = Helvetica, fillcolor='#e9a3c9', color='#e9a3c9',style=filled]
Vector; Insert
# set other 'node's statements
node [shape = rect, fontname = Helvetica, color='#a1d76a', fillcolor='#a1d76a', style=filled]
# several 'edge' statements
edge[color='#0a9396',style=filled,arrowhead=vee]
Vector-> 'PCR or Synthesis'->Linearized
Linearized->Seamless_Cloning
Vector->'Non-linearized'->Digestion->Purification->Linearized->Ligation
Insert->Sticky_end->Ligation
Insert->Blunt_end -> Seamless_Cloning->New_Plasmid
Ligation->New_Plasmid
New_Plasmid[fillcolor='#ffcb77',style=filled,color='#ffcb77']
# must add style=filled otherwise does not work with fillcolor
subgraph {
rank = same; Vector; Insert; }
subgraph {
rank = same; Linearized; Blunt_end; Sticky_end; }
}",height = 600)
pdftools::pdf_convert(
pdf = "ChickWeight.pdf",
filenames = "ChickWeight.png",
format = "png",
dpi = 200
)
library(tidyverse)
library(hrbrthemes)
library(ggh4x)
showtext::showtext.auto()
set.seed(1030)
df1 <- tibble(
x1 = seq(1, 10, by = 1),
y1 = rnorm(10, mean = 3, sd = .8) + x1
)
ggplot(df1, aes(x1, y1)) +
geom_line() +
geom_point() +
scale_x_continuous(
minor_breaks = seq(5, 8, .1),
breaks = seq(1, 10, 1),
guide = "axis_minor"
)+
scale_y_continuous(
minor_breaks = seq(10, 12.5, .1), # set minor_breaks
breaks = seq(4, 13, 1),
guide = "axis_minor"
)+
labs(x=NULL,y=NULL
)+
theme_modern_rc()
ggplot(df1, aes(x1, y1)) +
geom_line(color="red") +
geom_point(color="yellow") +
scale_x_continuous(
minor_breaks = c(
seq(1, 4, .5),
seq(5, 8, .1)
),
breaks = seq(1, 10, 1),
guide = "axis_minor"
) +
scale_y_continuous(
minor_breaks =
seq(5, 6, .1),
breaks = seq(5, 13, 1),
guide = "axis_minor"
)+
labs(title = "Please ignore the aesthetic design ",
subtitle = "Just to highlight the function",
x=NULL,
y=NULL)+
theme_bw(28) +
theme(axis.ticks.length.x = unit(0.5, "cm")) + # set ticks length
theme(ggh4x.axis.ticks.length.minor = rel(.5))+ # set minor / major ticks length ratio
theme(panel.grid = element_line(color = "blue",size=.3))
