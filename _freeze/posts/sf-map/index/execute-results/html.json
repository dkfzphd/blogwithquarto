{
  "hash": "e6829399c3dc0d31a5219fb6952b9e23",
  "result": {
    "markdown": "---\ntitle: \"title change\" \nauthor: \"Te\"\ndate: \"2022-11-08\"\ncategories: [sf, map, heatmap]\nformat: \n  html:\n    fig-width: 8\n    fig-height: 6\n---\n\n\nDownload map from China website(**be cautious about border and official government data** )\n\nChina Map geojson source website: https://geojson.cn/\n\n## Example 1: Map to Map-Heatmap\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.9.1, GDAL 3.4.3, PROJ 7.2.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(hrbrthemes)\nsysfonts::font_add_google(\"Roboto Condensed\", family = \"Roboto Condensed\")\nsysfonts::font_families()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sans\"             \"serif\"            \"mono\"             \"Roboto Condensed\"\n```\n:::\n\n```{.r .cell-code}\nshowtext::showtext.auto()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'showtext.auto()' is now renamed to 'showtext_auto()'\nThe old version still works, but consider using the new function in future code\n```\n:::\n\n```{.r .cell-code}\nchina_map <- st_read(dsn = \"https://geojson.cn/api/data/china.json\", stringsAsFactors = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `china' from data source `https://geojson.cn/api/data/china.json' using driver `GeoJSON'\nSimple feature collection with 36 features and 10 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 73.50235 ymin: 17.9869 xmax: 135.0957 ymax: 53.56327\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\n# china_map  \n\n\njingfei_china <- read_excel(here::here(\"posts/sf-map/jingfei-china.xlsx\")) %>% janitor::clean_names() %>% rename(name=de_qu)\n```\n:::\n\n\nFilter data for plot map\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_china <- china_map  %>% select(-c(childrenNum:bbox)) \n\nmap_china <- left_join(map_china,jingfei_china,by=\"name\")\nmap_china$r_d_jing_fei <- as.numeric(map_china$r_d_jing_fei)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_china %>%\n  ggplot() +\n  geom_sf(aes(fill = r_d_jing_fei)) +\n  scale_fill_gradient2(low = \"black\", mid = \"transparent\", high = \"red\") +\n  geom_sf_text(aes(label = name), colour = \"gray95\", size = 2) +\n  labs(\n    title = \"2021研究经费绝对量热度\",\n    caption = \"国家统计局 | 2021年全国科技经费投入统计公报 | Plotbyme\",\n    y = NULL,\n    x = NULL\n  ) +\n  theme_modern_rc() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(size = 22, hjust = .5, family = \"wqy-microhei\"),\n    plot.caption = element_text(hjust = 0.9,  family = \"wqy-microhei\")\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save plot\n# name <- \"ResearchInvent_China2021\" # change the save filename here\n# ggsave(filename = glue::glue('{name}.pdf'), plot = last_plot(), \n#        height = 6, width = 8, units=\"in\", device=cairo_pdf)\n# pdftools::pdf_convert(\n#   pdf = glue::glue('{name}.pdf'),\n#   filenames = glue::glue('{name}.png'),\n#   format = \"png\", \n#   dpi = 600\n# )\n```\n:::\n\n\n## Example 2: Coordinates to Province Location\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(readxl)\n\nshowtext::showtext.auto()\n\nchina_map <- st_read(dsn = \"https://geojson.cn/api/data/china.json\", stringsAsFactors = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `china' from data source `https://geojson.cn/api/data/china.json' using driver `GeoJSON'\nSimple feature collection with 36 features and 10 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 73.50235 ymin: 17.9869 xmax: 135.0957 ymax: 53.56327\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n\nlat,long read in\n\n::: {.cell}\n\n```{.r .cell-code}\nmetro <- read_excel(here::here(\"posts/sf-map/metro.xlsx\"))\n\nmetro_df <- metro %>% select(\"Entity ID\",\"lon\",\"lat\")\n```\n:::\n\n\nbasic china map\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_china <- china_map  %>% select(-c(childrenNum:bbox)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_china %>%\n  ggplot() +\n  geom_sf() +\n  geom_sf_text(aes(label = name))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n\n## pointsDF: A data.frame whose first column contains longitudes and\n##           whose second column contains latitudes.\n##\n## states:   An sf MULTIPOLYGON object with 50 states plus DC.\n##\n## name_col: Name of a column in `states` that supplies the states'\n##           names.\nlonlat_to_state <- function(pointsDF,\n                            states = map_china,\n                            name_col = \"name\") {\n    ## Convert points data.frame to an sf POINTS object\n    pts <- st_as_sf(pointsDF, coords = 1:2, crs = 4326)\n\n    ## Transform spatial data to some planar coordinate system\n    ## (e.g. Web Mercator) as required for geometric operations\n    states <- st_transform(states, crs = 3857)\n    pts <- st_transform(pts, crs = 3857)\n\n    ## Find names of state (if any) intersected by each point\n    state_names <- states[[name_col]]\n    ii <- as.integer(st_intersects(pts, states))\n    state_names[ii]\n}\n\n## Test the function with points in Wisconsin, Oregon, and France\ntestPoints <- data.frame(metro_df$lon, metro_df$lat)\n\n# lonlat_to_state(testPoints)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntestPoints <- data.frame(metro_df$lon, metro_df$lat)\n\n# get coordinate to location,  modern province\nmetro_df$location <- lonlat_to_state(testPoints)\n\nmetro_df <- metro_df %>% select(-c(lon, lat))\n\nmetro_final <- left_join(metro, metro_df, by = \"Entity ID\") %>%\n  janitor::clean_names() %>%\n  unique()\n```\n:::\n\n\nsummary number of sites in modern china province\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(metro_final$location) %>% sort(decreasing = TRUE)%>% knitr::kable()\n```\n\n::: {.cell-output-display}\n|Var1   | Freq|\n|:------|----:|\n|四川   |  156|\n|河南   |  121|\n|河北   |   96|\n|陕西   |   92|\n|山西   |   91|\n|山东   |   90|\n|江西   |   67|\n|浙江   |   67|\n|湖南   |   58|\n|安徽   |   57|\n|湖北   |   57|\n|广西   |   56|\n|福建   |   44|\n|广东   |   43|\n|江苏   |   43|\n|重庆   |   37|\n|甘肃   |   26|\n|海南   |    7|\n|上海   |    2|\n|内蒙古 |    1|\n|天津   |    1|\n|宁夏   |    1|\n:::\n:::\n\n\nexport data.frame to excel\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(\"writexl\")\n# write_xlsx(metro_final,\"metro_final.xlsx\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsites <- data.frame(longitude = metro_final$lon, latitude = metro$lat)\n\nsites <- st_as_sf(sites,\n  coords = c(\"longitude\", \"latitude\"),\n  crs = 4326, agr = \"constant\")\n\nggplot(map_china) +\n  geom_sf() +\n  geom_sf_text(aes(label = name),color=\"black\") +\n  geom_sf(data = sites, size = .5, color = \"red\", alpha = .3)+\n  theme_void()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}